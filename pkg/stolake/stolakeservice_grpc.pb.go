// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.5
// source: proto/stolakeservice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StolakeClient is the client API for Stolake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StolakeClient interface {
	// Agent Identity information
	RetrieveInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoRes, error)
	// Retrieve udev information
	RetrieveUDev(ctx context.Context, in *GetUdevReq, opts ...grpc.CallOption) (*GetUdevRes, error)
	// Retrieve partition information
	RetrievePart(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*GetPartRes, error)
	// Partition Request
	RemovePart(ctx context.Context, in *PartRmReq, opts ...grpc.CallOption) (*RmRes, error)
	PartDev(ctx context.Context, in *PartReq, opts ...grpc.CallOption) (*PartRes, error)
	ConfigDriveGPT(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*PartRes, error)
	// LVM Services
	RetrievePhyVol(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*PvScanRes, error)
	RetrieveVolGroup(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*VgScanRes, error)
	RemovePhyVol(ctx context.Context, in *PvRmReq, opts ...grpc.CallOption) (*RmRes, error)
	RemoveVolGroup(ctx context.Context, in *VgRmReq, opts ...grpc.CallOption) (*RmRes, error)
	CheckVolGroup(ctx context.Context, in *VgChkReq, opts ...grpc.CallOption) (*VgChkRes, error)
	CreateVolGroup(ctx context.Context, in *VgReq, opts ...grpc.CallOption) (*VgRes, error)
	ExtendVolGroup(ctx context.Context, in *VgReq, opts ...grpc.CallOption) (*VgRes, error)
	PvScan(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*ScanRes, error)
	VgScan(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*ScanRes, error)
	VgChange(ctx context.Context, in *ChgReq, opts ...grpc.CallOption) (*ChgRes, error)
	LvChange(ctx context.Context, in *ChgReq, opts ...grpc.CallOption) (*ChgRes, error)
	// SED services
	RetrieveSed(ctx context.Context, in *GetUdevReq, opts ...grpc.CallOption) (*GetSedRes, error)
	CheckSed(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*Res, error)
	Takeownership(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*Res, error)
	LockSed(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*Res, error)
	UnlockSed(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*Res, error)
	LockBand(ctx context.Context, in *PartRmReq, opts ...grpc.CallOption) (*Res, error)
	UnlockBand(ctx context.Context, in *PartRmReq, opts ...grpc.CallOption) (*Res, error)
	ConfigureBand(ctx context.Context, in *ConfigBandReq, opts ...grpc.CallOption) (*Res, error)
	// iSCSI Services
	StageIscsi(ctx context.Context, in *StageIscsiReq, opts ...grpc.CallOption) (*StageIscsiRes, error)
	UnStageIscsi(ctx context.Context, in *StageIscsiReq, opts ...grpc.CallOption) (*UnStageIscsiRes, error)
	ListIscsi(ctx context.Context, in *ListIscsiReq, opts ...grpc.CallOption) (*ListIscsiRes, error)
	// Mercury Services for CSI driver
	MercuryProxy(ctx context.Context, in *MercProxyReq, opts ...grpc.CallOption) (*MercProxyRes, error)
	// RAID Health services
	RetrieveTopLevelLogicalVol(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*TopLvScanRes, error)
	RetrieveLogicalVol(ctx context.Context, in *GetLvReq, opts ...grpc.CallOption) (*GetLvRes, error)
	RetrieveVgFromUUID(ctx context.Context, in *MissingPvMsg, opts ...grpc.CallOption) (*MissingPvMsg, error)
	RecoverPv(ctx context.Context, in *MissingPvMsg, opts ...grpc.CallOption) (*Res, error)
	LvConvertRepair(ctx context.Context, in *LvConReq, opts ...grpc.CallOption) (*Res, error)
	VgReduceMissing(ctx context.Context, in *VgReq, opts ...grpc.CallOption) (*Res, error)
}

type stolakeClient struct {
	cc grpc.ClientConnInterface
}

func NewStolakeClient(cc grpc.ClientConnInterface) StolakeClient {
	return &stolakeClient{cc}
}

func (c *stolakeClient) RetrieveInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoRes, error) {
	out := new(GetInfoRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/RetrieveInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RetrieveUDev(ctx context.Context, in *GetUdevReq, opts ...grpc.CallOption) (*GetUdevRes, error) {
	out := new(GetUdevRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/RetrieveUDev", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RetrievePart(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*GetPartRes, error) {
	out := new(GetPartRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/RetrievePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RemovePart(ctx context.Context, in *PartRmReq, opts ...grpc.CallOption) (*RmRes, error) {
	out := new(RmRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/RemovePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) PartDev(ctx context.Context, in *PartReq, opts ...grpc.CallOption) (*PartRes, error) {
	out := new(PartRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/PartDev", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) ConfigDriveGPT(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*PartRes, error) {
	out := new(PartRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/ConfigDriveGPT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RetrievePhyVol(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*PvScanRes, error) {
	out := new(PvScanRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/RetrievePhyVol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RetrieveVolGroup(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*VgScanRes, error) {
	out := new(VgScanRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/RetrieveVolGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RemovePhyVol(ctx context.Context, in *PvRmReq, opts ...grpc.CallOption) (*RmRes, error) {
	out := new(RmRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/RemovePhyVol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RemoveVolGroup(ctx context.Context, in *VgRmReq, opts ...grpc.CallOption) (*RmRes, error) {
	out := new(RmRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/RemoveVolGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) CheckVolGroup(ctx context.Context, in *VgChkReq, opts ...grpc.CallOption) (*VgChkRes, error) {
	out := new(VgChkRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/CheckVolGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) CreateVolGroup(ctx context.Context, in *VgReq, opts ...grpc.CallOption) (*VgRes, error) {
	out := new(VgRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/CreateVolGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) ExtendVolGroup(ctx context.Context, in *VgReq, opts ...grpc.CallOption) (*VgRes, error) {
	out := new(VgRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/ExtendVolGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) PvScan(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*ScanRes, error) {
	out := new(ScanRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/PvScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) VgScan(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*ScanRes, error) {
	out := new(ScanRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/VgScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) VgChange(ctx context.Context, in *ChgReq, opts ...grpc.CallOption) (*ChgRes, error) {
	out := new(ChgRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/VgChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) LvChange(ctx context.Context, in *ChgReq, opts ...grpc.CallOption) (*ChgRes, error) {
	out := new(ChgRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/LvChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RetrieveSed(ctx context.Context, in *GetUdevReq, opts ...grpc.CallOption) (*GetSedRes, error) {
	out := new(GetSedRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/RetrieveSed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) CheckSed(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.stolake/CheckSed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) Takeownership(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.stolake/Takeownership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) LockSed(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.stolake/LockSed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) UnlockSed(ctx context.Context, in *GetPartReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.stolake/UnlockSed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) LockBand(ctx context.Context, in *PartRmReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.stolake/LockBand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) UnlockBand(ctx context.Context, in *PartRmReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.stolake/UnlockBand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) ConfigureBand(ctx context.Context, in *ConfigBandReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.stolake/ConfigureBand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) StageIscsi(ctx context.Context, in *StageIscsiReq, opts ...grpc.CallOption) (*StageIscsiRes, error) {
	out := new(StageIscsiRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/StageIscsi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) UnStageIscsi(ctx context.Context, in *StageIscsiReq, opts ...grpc.CallOption) (*UnStageIscsiRes, error) {
	out := new(UnStageIscsiRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/UnStageIscsi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) ListIscsi(ctx context.Context, in *ListIscsiReq, opts ...grpc.CallOption) (*ListIscsiRes, error) {
	out := new(ListIscsiRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/ListIscsi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) MercuryProxy(ctx context.Context, in *MercProxyReq, opts ...grpc.CallOption) (*MercProxyRes, error) {
	out := new(MercProxyRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/MercuryProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RetrieveTopLevelLogicalVol(ctx context.Context, in *ScanReq, opts ...grpc.CallOption) (*TopLvScanRes, error) {
	out := new(TopLvScanRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/RetrieveTopLevelLogicalVol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RetrieveLogicalVol(ctx context.Context, in *GetLvReq, opts ...grpc.CallOption) (*GetLvRes, error) {
	out := new(GetLvRes)
	err := c.cc.Invoke(ctx, "/proto.stolake/RetrieveLogicalVol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RetrieveVgFromUUID(ctx context.Context, in *MissingPvMsg, opts ...grpc.CallOption) (*MissingPvMsg, error) {
	out := new(MissingPvMsg)
	err := c.cc.Invoke(ctx, "/proto.stolake/RetrieveVgFromUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) RecoverPv(ctx context.Context, in *MissingPvMsg, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.stolake/RecoverPv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) LvConvertRepair(ctx context.Context, in *LvConReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.stolake/LvConvertRepair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stolakeClient) VgReduceMissing(ctx context.Context, in *VgReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.stolake/VgReduceMissing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StolakeServer is the server API for Stolake service.
// All implementations must embed UnimplementedStolakeServer
// for forward compatibility
type StolakeServer interface {
	// Agent Identity information
	RetrieveInfo(context.Context, *GetInfoReq) (*GetInfoRes, error)
	// Retrieve udev information
	RetrieveUDev(context.Context, *GetUdevReq) (*GetUdevRes, error)
	// Retrieve partition information
	RetrievePart(context.Context, *GetPartReq) (*GetPartRes, error)
	// Partition Request
	RemovePart(context.Context, *PartRmReq) (*RmRes, error)
	PartDev(context.Context, *PartReq) (*PartRes, error)
	ConfigDriveGPT(context.Context, *GetPartReq) (*PartRes, error)
	// LVM Services
	RetrievePhyVol(context.Context, *ScanReq) (*PvScanRes, error)
	RetrieveVolGroup(context.Context, *ScanReq) (*VgScanRes, error)
	RemovePhyVol(context.Context, *PvRmReq) (*RmRes, error)
	RemoveVolGroup(context.Context, *VgRmReq) (*RmRes, error)
	CheckVolGroup(context.Context, *VgChkReq) (*VgChkRes, error)
	CreateVolGroup(context.Context, *VgReq) (*VgRes, error)
	ExtendVolGroup(context.Context, *VgReq) (*VgRes, error)
	PvScan(context.Context, *ScanReq) (*ScanRes, error)
	VgScan(context.Context, *ScanReq) (*ScanRes, error)
	VgChange(context.Context, *ChgReq) (*ChgRes, error)
	LvChange(context.Context, *ChgReq) (*ChgRes, error)
	// SED services
	RetrieveSed(context.Context, *GetUdevReq) (*GetSedRes, error)
	CheckSed(context.Context, *GetPartReq) (*Res, error)
	Takeownership(context.Context, *GetPartReq) (*Res, error)
	LockSed(context.Context, *GetPartReq) (*Res, error)
	UnlockSed(context.Context, *GetPartReq) (*Res, error)
	LockBand(context.Context, *PartRmReq) (*Res, error)
	UnlockBand(context.Context, *PartRmReq) (*Res, error)
	ConfigureBand(context.Context, *ConfigBandReq) (*Res, error)
	// iSCSI Services
	StageIscsi(context.Context, *StageIscsiReq) (*StageIscsiRes, error)
	UnStageIscsi(context.Context, *StageIscsiReq) (*UnStageIscsiRes, error)
	ListIscsi(context.Context, *ListIscsiReq) (*ListIscsiRes, error)
	// Mercury Services for CSI driver
	MercuryProxy(context.Context, *MercProxyReq) (*MercProxyRes, error)
	// RAID Health services
	RetrieveTopLevelLogicalVol(context.Context, *ScanReq) (*TopLvScanRes, error)
	RetrieveLogicalVol(context.Context, *GetLvReq) (*GetLvRes, error)
	RetrieveVgFromUUID(context.Context, *MissingPvMsg) (*MissingPvMsg, error)
	RecoverPv(context.Context, *MissingPvMsg) (*Res, error)
	LvConvertRepair(context.Context, *LvConReq) (*Res, error)
	VgReduceMissing(context.Context, *VgReq) (*Res, error)
	mustEmbedUnimplementedStolakeServer()
}

// UnimplementedStolakeServer must be embedded to have forward compatible implementations.
type UnimplementedStolakeServer struct {
}

func (UnimplementedStolakeServer) RetrieveInfo(context.Context, *GetInfoReq) (*GetInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveInfo not implemented")
}
func (UnimplementedStolakeServer) RetrieveUDev(context.Context, *GetUdevReq) (*GetUdevRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveUDev not implemented")
}
func (UnimplementedStolakeServer) RetrievePart(context.Context, *GetPartReq) (*GetPartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePart not implemented")
}
func (UnimplementedStolakeServer) RemovePart(context.Context, *PartRmReq) (*RmRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePart not implemented")
}
func (UnimplementedStolakeServer) PartDev(context.Context, *PartReq) (*PartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartDev not implemented")
}
func (UnimplementedStolakeServer) ConfigDriveGPT(context.Context, *GetPartReq) (*PartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigDriveGPT not implemented")
}
func (UnimplementedStolakeServer) RetrievePhyVol(context.Context, *ScanReq) (*PvScanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePhyVol not implemented")
}
func (UnimplementedStolakeServer) RetrieveVolGroup(context.Context, *ScanReq) (*VgScanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveVolGroup not implemented")
}
func (UnimplementedStolakeServer) RemovePhyVol(context.Context, *PvRmReq) (*RmRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePhyVol not implemented")
}
func (UnimplementedStolakeServer) RemoveVolGroup(context.Context, *VgRmReq) (*RmRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVolGroup not implemented")
}
func (UnimplementedStolakeServer) CheckVolGroup(context.Context, *VgChkReq) (*VgChkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVolGroup not implemented")
}
func (UnimplementedStolakeServer) CreateVolGroup(context.Context, *VgReq) (*VgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolGroup not implemented")
}
func (UnimplementedStolakeServer) ExtendVolGroup(context.Context, *VgReq) (*VgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendVolGroup not implemented")
}
func (UnimplementedStolakeServer) PvScan(context.Context, *ScanReq) (*ScanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PvScan not implemented")
}
func (UnimplementedStolakeServer) VgScan(context.Context, *ScanReq) (*ScanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VgScan not implemented")
}
func (UnimplementedStolakeServer) VgChange(context.Context, *ChgReq) (*ChgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VgChange not implemented")
}
func (UnimplementedStolakeServer) LvChange(context.Context, *ChgReq) (*ChgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LvChange not implemented")
}
func (UnimplementedStolakeServer) RetrieveSed(context.Context, *GetUdevReq) (*GetSedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSed not implemented")
}
func (UnimplementedStolakeServer) CheckSed(context.Context, *GetPartReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSed not implemented")
}
func (UnimplementedStolakeServer) Takeownership(context.Context, *GetPartReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Takeownership not implemented")
}
func (UnimplementedStolakeServer) LockSed(context.Context, *GetPartReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockSed not implemented")
}
func (UnimplementedStolakeServer) UnlockSed(context.Context, *GetPartReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockSed not implemented")
}
func (UnimplementedStolakeServer) LockBand(context.Context, *PartRmReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockBand not implemented")
}
func (UnimplementedStolakeServer) UnlockBand(context.Context, *PartRmReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockBand not implemented")
}
func (UnimplementedStolakeServer) ConfigureBand(context.Context, *ConfigBandReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureBand not implemented")
}
func (UnimplementedStolakeServer) StageIscsi(context.Context, *StageIscsiReq) (*StageIscsiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageIscsi not implemented")
}
func (UnimplementedStolakeServer) UnStageIscsi(context.Context, *StageIscsiReq) (*UnStageIscsiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnStageIscsi not implemented")
}
func (UnimplementedStolakeServer) ListIscsi(context.Context, *ListIscsiReq) (*ListIscsiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIscsi not implemented")
}
func (UnimplementedStolakeServer) MercuryProxy(context.Context, *MercProxyReq) (*MercProxyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MercuryProxy not implemented")
}
func (UnimplementedStolakeServer) RetrieveTopLevelLogicalVol(context.Context, *ScanReq) (*TopLvScanRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTopLevelLogicalVol not implemented")
}
func (UnimplementedStolakeServer) RetrieveLogicalVol(context.Context, *GetLvReq) (*GetLvRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLogicalVol not implemented")
}
func (UnimplementedStolakeServer) RetrieveVgFromUUID(context.Context, *MissingPvMsg) (*MissingPvMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveVgFromUUID not implemented")
}
func (UnimplementedStolakeServer) RecoverPv(context.Context, *MissingPvMsg) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverPv not implemented")
}
func (UnimplementedStolakeServer) LvConvertRepair(context.Context, *LvConReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LvConvertRepair not implemented")
}
func (UnimplementedStolakeServer) VgReduceMissing(context.Context, *VgReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VgReduceMissing not implemented")
}
func (UnimplementedStolakeServer) mustEmbedUnimplementedStolakeServer() {}

// UnsafeStolakeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StolakeServer will
// result in compilation errors.
type UnsafeStolakeServer interface {
	mustEmbedUnimplementedStolakeServer()
}

func RegisterStolakeServer(s grpc.ServiceRegistrar, srv StolakeServer) {
	s.RegisterService(&Stolake_ServiceDesc, srv)
}

func _Stolake_RetrieveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RetrieveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RetrieveInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RetrieveInfo(ctx, req.(*GetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RetrieveUDev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUdevReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RetrieveUDev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RetrieveUDev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RetrieveUDev(ctx, req.(*GetUdevReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RetrievePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RetrievePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RetrievePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RetrievePart(ctx, req.(*GetPartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RemovePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartRmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RemovePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RemovePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RemovePart(ctx, req.(*PartRmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_PartDev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).PartDev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/PartDev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).PartDev(ctx, req.(*PartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_ConfigDriveGPT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).ConfigDriveGPT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/ConfigDriveGPT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).ConfigDriveGPT(ctx, req.(*GetPartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RetrievePhyVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RetrievePhyVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RetrievePhyVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RetrievePhyVol(ctx, req.(*ScanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RetrieveVolGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RetrieveVolGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RetrieveVolGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RetrieveVolGroup(ctx, req.(*ScanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RemovePhyVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PvRmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RemovePhyVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RemovePhyVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RemovePhyVol(ctx, req.(*PvRmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RemoveVolGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VgRmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RemoveVolGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RemoveVolGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RemoveVolGroup(ctx, req.(*VgRmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_CheckVolGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VgChkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).CheckVolGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/CheckVolGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).CheckVolGroup(ctx, req.(*VgChkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_CreateVolGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).CreateVolGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/CreateVolGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).CreateVolGroup(ctx, req.(*VgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_ExtendVolGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).ExtendVolGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/ExtendVolGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).ExtendVolGroup(ctx, req.(*VgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_PvScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).PvScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/PvScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).PvScan(ctx, req.(*ScanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_VgScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).VgScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/VgScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).VgScan(ctx, req.(*ScanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_VgChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).VgChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/VgChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).VgChange(ctx, req.(*ChgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_LvChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).LvChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/LvChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).LvChange(ctx, req.(*ChgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RetrieveSed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUdevReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RetrieveSed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RetrieveSed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RetrieveSed(ctx, req.(*GetUdevReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_CheckSed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).CheckSed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/CheckSed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).CheckSed(ctx, req.(*GetPartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_Takeownership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).Takeownership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/Takeownership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).Takeownership(ctx, req.(*GetPartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_LockSed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).LockSed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/LockSed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).LockSed(ctx, req.(*GetPartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_UnlockSed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).UnlockSed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/UnlockSed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).UnlockSed(ctx, req.(*GetPartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_LockBand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartRmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).LockBand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/LockBand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).LockBand(ctx, req.(*PartRmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_UnlockBand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartRmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).UnlockBand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/UnlockBand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).UnlockBand(ctx, req.(*PartRmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_ConfigureBand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigBandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).ConfigureBand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/ConfigureBand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).ConfigureBand(ctx, req.(*ConfigBandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_StageIscsi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageIscsiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).StageIscsi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/StageIscsi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).StageIscsi(ctx, req.(*StageIscsiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_UnStageIscsi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageIscsiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).UnStageIscsi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/UnStageIscsi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).UnStageIscsi(ctx, req.(*StageIscsiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_ListIscsi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIscsiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).ListIscsi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/ListIscsi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).ListIscsi(ctx, req.(*ListIscsiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_MercuryProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MercProxyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).MercuryProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/MercuryProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).MercuryProxy(ctx, req.(*MercProxyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RetrieveTopLevelLogicalVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RetrieveTopLevelLogicalVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RetrieveTopLevelLogicalVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RetrieveTopLevelLogicalVol(ctx, req.(*ScanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RetrieveLogicalVol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RetrieveLogicalVol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RetrieveLogicalVol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RetrieveLogicalVol(ctx, req.(*GetLvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RetrieveVgFromUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissingPvMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RetrieveVgFromUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RetrieveVgFromUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RetrieveVgFromUUID(ctx, req.(*MissingPvMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_RecoverPv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissingPvMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).RecoverPv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/RecoverPv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).RecoverPv(ctx, req.(*MissingPvMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_LvConvertRepair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LvConReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).LvConvertRepair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/LvConvertRepair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).LvConvertRepair(ctx, req.(*LvConReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stolake_VgReduceMissing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StolakeServer).VgReduceMissing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.stolake/VgReduceMissing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StolakeServer).VgReduceMissing(ctx, req.(*VgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Stolake_ServiceDesc is the grpc.ServiceDesc for Stolake service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stolake_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.stolake",
	HandlerType: (*StolakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveInfo",
			Handler:    _Stolake_RetrieveInfo_Handler,
		},
		{
			MethodName: "RetrieveUDev",
			Handler:    _Stolake_RetrieveUDev_Handler,
		},
		{
			MethodName: "RetrievePart",
			Handler:    _Stolake_RetrievePart_Handler,
		},
		{
			MethodName: "RemovePart",
			Handler:    _Stolake_RemovePart_Handler,
		},
		{
			MethodName: "PartDev",
			Handler:    _Stolake_PartDev_Handler,
		},
		{
			MethodName: "ConfigDriveGPT",
			Handler:    _Stolake_ConfigDriveGPT_Handler,
		},
		{
			MethodName: "RetrievePhyVol",
			Handler:    _Stolake_RetrievePhyVol_Handler,
		},
		{
			MethodName: "RetrieveVolGroup",
			Handler:    _Stolake_RetrieveVolGroup_Handler,
		},
		{
			MethodName: "RemovePhyVol",
			Handler:    _Stolake_RemovePhyVol_Handler,
		},
		{
			MethodName: "RemoveVolGroup",
			Handler:    _Stolake_RemoveVolGroup_Handler,
		},
		{
			MethodName: "CheckVolGroup",
			Handler:    _Stolake_CheckVolGroup_Handler,
		},
		{
			MethodName: "CreateVolGroup",
			Handler:    _Stolake_CreateVolGroup_Handler,
		},
		{
			MethodName: "ExtendVolGroup",
			Handler:    _Stolake_ExtendVolGroup_Handler,
		},
		{
			MethodName: "PvScan",
			Handler:    _Stolake_PvScan_Handler,
		},
		{
			MethodName: "VgScan",
			Handler:    _Stolake_VgScan_Handler,
		},
		{
			MethodName: "VgChange",
			Handler:    _Stolake_VgChange_Handler,
		},
		{
			MethodName: "LvChange",
			Handler:    _Stolake_LvChange_Handler,
		},
		{
			MethodName: "RetrieveSed",
			Handler:    _Stolake_RetrieveSed_Handler,
		},
		{
			MethodName: "CheckSed",
			Handler:    _Stolake_CheckSed_Handler,
		},
		{
			MethodName: "Takeownership",
			Handler:    _Stolake_Takeownership_Handler,
		},
		{
			MethodName: "LockSed",
			Handler:    _Stolake_LockSed_Handler,
		},
		{
			MethodName: "UnlockSed",
			Handler:    _Stolake_UnlockSed_Handler,
		},
		{
			MethodName: "LockBand",
			Handler:    _Stolake_LockBand_Handler,
		},
		{
			MethodName: "UnlockBand",
			Handler:    _Stolake_UnlockBand_Handler,
		},
		{
			MethodName: "ConfigureBand",
			Handler:    _Stolake_ConfigureBand_Handler,
		},
		{
			MethodName: "StageIscsi",
			Handler:    _Stolake_StageIscsi_Handler,
		},
		{
			MethodName: "UnStageIscsi",
			Handler:    _Stolake_UnStageIscsi_Handler,
		},
		{
			MethodName: "ListIscsi",
			Handler:    _Stolake_ListIscsi_Handler,
		},
		{
			MethodName: "MercuryProxy",
			Handler:    _Stolake_MercuryProxy_Handler,
		},
		{
			MethodName: "RetrieveTopLevelLogicalVol",
			Handler:    _Stolake_RetrieveTopLevelLogicalVol_Handler,
		},
		{
			MethodName: "RetrieveLogicalVol",
			Handler:    _Stolake_RetrieveLogicalVol_Handler,
		},
		{
			MethodName: "RetrieveVgFromUUID",
			Handler:    _Stolake_RetrieveVgFromUUID_Handler,
		},
		{
			MethodName: "RecoverPv",
			Handler:    _Stolake_RecoverPv_Handler,
		},
		{
			MethodName: "LvConvertRepair",
			Handler:    _Stolake_LvConvertRepair_Handler,
		},
		{
			MethodName: "VgReduceMissing",
			Handler:    _Stolake_VgReduceMissing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stolakeservice.proto",
}

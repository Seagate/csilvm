syntax = "proto3";
package proto;

option go_package = "stolake/proto";

// Service to manage paritioning of devices
service stolake {
    // Agent Identity information
    rpc RetrieveInfo(GetInfoReq) returns (GetInfoRes);

    // Retrieve udev information
    rpc RetrieveUDev(GetUdevReq) returns (GetUdevRes);

    // Retrieve partition information
    rpc RetrievePart(GetPartReq) returns (GetPartRes);

    // Partition Request
    rpc RemovePart(PartRmReq) returns (RmRes);
    rpc PartDev(PartReq) returns (PartRes);
    rpc ConfigDriveGPT(GetPartReq) returns (PartRes);

    // LVM Services
    rpc RetrievePhyVol(ScanReq) returns (PvScanRes);
    rpc RetrieveVolGroup(ScanReq) returns (VgScanRes);
    rpc RemovePhyVol(PvRmReq) returns (RmRes);
    rpc RemoveVolGroup(VgRmReq) returns (RmRes);
    rpc CheckVolGroup(VgChkReq) returns (VgChkRes);
    rpc CreateVolGroup(VgReq) returns (VgRes);
    rpc ExtendVolGroup(VgReq) returns (VgRes);
    rpc PvScan(ScanReq) returns (ScanRes);
    rpc VgScan(ScanReq) returns (ScanRes);
    rpc VgChange(ChgReq) returns (ChgRes);
    rpc LvChange(ChgReq) returns (ChgRes);

    // SED services
    rpc RetrieveSed(GetUdevReq) returns (GetSedRes);
    rpc CheckSed(GetPartReq) returns (Res);
    rpc Takeownership(GetPartReq) returns (Res);
    rpc LockSed(GetPartReq) returns (Res);
    rpc UnlockSed(GetPartReq) returns (Res);
    rpc LockBand(PartRmReq) returns (Res);
    rpc UnlockBand(PartRmReq) returns (Res);
    rpc ConfigureBand(ConfigBandReq) returns (Res);

    // iSCSI Services
    rpc StageIscsi(StageIscsiReq) returns (StageIscsiRes);
    rpc UnStageIscsi(StageIscsiReq) returns (UnStageIscsiRes);
    rpc ListIscsi(ListIscsiReq) returns (ListIscsiRes);

    // Mercury Services for CSI driver
    rpc MercuryProxy(MercProxyReq) returns (MercProxyRes);
    rpc FileSystemType(FileSystemTypeReq) returns (FileSystemTypeRes);
    rpc MountInfo(MountInfoReq) returns (MountInfoRes);
    rpc MountVolume(MountVolumeReq) returns (MountVolumeRes);
    rpc UnMountVolume(UnMountVolumeReq) returns (UnMountVolumeRes);
    rpc LvQoS(LvQoSReq) returns (LvQoSRes);


    // RAID Health services
    rpc RetrieveTopLevelLogicalVol(ScanReq) returns (TopLvScanRes);
    rpc RetrieveLogicalVol(GetLvReq) returns (GetLvRes);
    rpc RetrieveVgFromUUID(MissingPvMsg) returns (MissingPvMsg);
    rpc RecoverPv(MissingPvMsg) returns (Res);
    rpc LvConvertRepair(LvConReq) returns (Res);
    rpc VgReduceMissing(VgReq) returns (Res);
}

message GetInfoReq {
    // Intentially empty
}

message GetInfoRes {
    // Agent Name which initiall is StoLake.  Variation may co-exist in the future
    string AgentName = 1;

    // Server version indentifier.  Client is responsible for combatibility checks.
    string Version = 2;
}

message TopLvScanRes {
    repeated TopLvInfo TopLvs = 1;
}

message TopLvInfo {
    string LvName = 1;
    string VgName = 2;
    string LvFullName = 3;
    string RaidType = 4;
}

message LvConReq {
    string AffectedPvPath = 1;
    string AffectedVgName = 2;
    string ReplacementPvPath = 3;
}

message MissingPvMsg {
    string UUID = 1;
    string Vgname = 2;
}

message GetLvReq {
    string LvName = 1;
}

message GetLvRes {
    repeated LV LvList = 1;
}

message LV {
	string Vgname = 1;
	string Lvname = 2;
	string Lvsize = 3;
	string Segtype = 4;
	string Stripes = 5;
	string Datacopies = 6;
	string Paritychunks = 7;
	string Devices = 8;
	string Metadatadevices = 9;
    string Syncpercent = 10;
	string Copypercent = 11;
	repeated LV NestedLV = 12;
	repeated string CfgPV = 13;
}

message GetUdevReq {
    string VendorName = 1;
}

message GetUdevRes {
    repeated Udev DevList = 1;
}

message Udev {
    string FwRev = 1;
    string Handle = 2;
    string Model = 3;
    string Serial = 4;
    string Vendor = 5;
}

message GetPartReq {
    string DevPath = 1;
}

message GetPartRes {
    repeated string PartedRes = 1;
}

message PartRmReq {
    string DevPath = 1;
    uint64 PartNum = 2;
}

message PartReq {
    string DevPath = 1;
    string PartName = 2;
    uint64 PStart = 3;
    uint64 PEnd = 4;
}

message PartRes {
    PartReq Req = 1;
    bool    Flag = 2;
}

message PvInfo {
    string PvName = 1;
    string VgName = 2;
    string Format = 3;
    string Attr = 4;
    int64 PSizeB = 5;
    int64 PFreeB = 6;
    string Uuid = 7;
}

message VgInfo {
    string  VgName = 1;
    uint32  PvCount = 2;
    uint32  LvCount = 3;
    uint32  SnapCount = 4;
    string  VgAttr = 5;
    uint32  VgSizeGb = 6;
    uint32  VgFreeGb = 7;
}

message PvScanRes {
    repeated PvInfo Pvs = 1;
}

message VgScanRes {
    repeated VgInfo Vgs = 1;
}

message PvRmReq {
    repeated string PvNames = 1;
}

message VgRmReq {
    string VgName = 1;
}

message RmRes {
    bool IsSuccess = 1;
}

message VgChkReq {
    string VgName = 1;
}

message VgChkRes {
    VgInfo  Vg = 1;
    bool    IsExist = 2;
}

message VgReq {
    string PartName = 1;
    string VgName = 2;
}

message VgRes {
    VgInfo  Vg = 1;
    bool    Flag = 2;
}

// no parameter requirement for scan request
// empty message to server as provisioning in the future
message ScanReq {}

// scan request response
message ScanRes {
    bool IsSuccess = 1;
}

message ChgReq {
    repeated string Arg = 1;
}

message ChgRes {
    bool IsSuccess = 1;
}

message MercProxyReq {
    // The operation to be run on the local node's base operating system.
    // The agent will filter out commands that are not expected for security
    string Cmd = 1;
    repeated string Args = 2;
}

message MercProxyRes {
    string Stdout = 1;
    string Stderr = 2;
}


message FileSystemTypeReq {
    // Returns the discoverable file system type of the block device
    string DevPath = 1;
}

message FileSystemTypeRes {
    // Returns "" if no file system is detected or the type of file system
    string FsType = 1;
}

message MountInfoReq {}

message MountInfoRes {
    // Returns contents of /proc/self/mountinfo
    string Info = 1;
}

message MountVolumeReq {
    // Source path must start with /dev/
    string SourcePath = 1;
    // Target path must start with /var/lib/kubelet/pods
    string TargetPath = 2;
    // Valid File system types are xfs, ext2, ext3, fat and block for no file system
    string FsType = 3;
    // Mount Read Only. Default is false.
    bool ReadOnly = 4;
    // Comma seperated string of mount options
    string MountOptions = 5;
    // GroupID to be set for the mount target
    string GroupId = 6;
    // Set user permission ugo+rwx on target 
    bool AllUsers = 7;
}


message MountVolumeRes {
    string Stdout = 1;
}

message UnMountVolumeReq {
    string TargetPath = 1;
}

message UnMountVolumeRes {
    string Stdout = 1;
}

message LvQoSReq {
    // Target Path of LV block device. (/dev/vgname/lvname)
    string TargetPath = 1;
    // IOPS per GB throttling limit
    string IOPSperGB = 2;
    // MB/s per GB throttling limit
    string MBpSperGB = 3;
}

message LvQoSRes {}

message GetSedRes {
    repeated Udev AllList = 1;
    repeated Udev NonSedList = 2;
    repeated Udev SedList = 3;
}

message Res {
    bool IsTrue = 1;
}

message ConfigBandReq {
    string DevPath = 1;
    uint64 PartNum = 2;
    uint64 PStart = 3;
    uint64 PEnd = 4;
}

// ISCSI //
message StageIscsiReq {
    // Logical Volume UUID to be used as backing storage of the iSCSI target
    string LvUuid = 1;
    // Initiators IQN for access control to target
    string InitiatorIqn = 2;
}

message StageIscsiRes {
    // The iscsi target portal (IP and port).  Example: 10.1.0.123:3260
    string TargetPortal = 1;
}

message UnStageIscsiReq {
    // Logical Volume UUID being used as backing storage of the iSCSI target
    string LvUuid = 1;
    // Initiators IQN that will be removed from access control list of the target
    string InitiatorIqn = 2;
}

message UnStageIscsiRes {}

message ListIscsiReq {}

message ListIscsiRes {
    message Target {
        string Lvuuid = 1;
        string Portal = 2;
        string Lun = 3;
        string InitiatorIqn = 4;
    }

    repeated Target Targets = 1;
}

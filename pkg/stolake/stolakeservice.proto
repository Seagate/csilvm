syntax = "proto3";
package proto;

option go_package = "stolake/proto";

// Service to manage paritioning of devices
service stolake {
    // Agent Identity information
    rpc RetrieveInfo(GetInfoReq) returns (GetInfoRes);

    // Retrieve udev information
    rpc RetrieveUDev(GetUdevReq) returns (GetUdevRes);

    // Retrieve partition information
    rpc RetrievePart(GetPartReq) returns (GetPartRes);

    // Partition Request
    rpc RemovePart(PartRmReq) returns (RmRes);
    rpc PartDev(PartReq) returns (PartRes);
    rpc ConfigDriveGPT(GetPartReq) returns (PartRes);

    // LVM Services
    rpc RetrievePhyVol(ScanReq) returns (PvScanRes);
    rpc RetrieveVolGroup(ScanReq) returns (VgScanRes);
    rpc RemovePhyVol(PvRmReq) returns (RmRes);
    rpc RemoveVolGroup(VgRmReq) returns (RmRes);
    rpc CheckVolGroup(VgChkReq) returns (VgChkRes);
    rpc CreateVolGroup(VgReq) returns (VgRes);
    rpc ExtendVolGroup(VgReq) returns (VgRes);
    rpc PvScan(ScanReq) returns (ScanRes);
    rpc VgScan(ScanReq) returns (ScanRes);
    rpc VgChange(ChgReq) returns (ChgRes);
    rpc LvChange(ChgReq) returns (ChgRes);

    // SED services
    rpc RetrieveSed(GetUdevReq) returns (GetSedRes);
    rpc CheckSed(GetPartReq) returns (Res);
    rpc Takeownership(GetPartReq) returns (Res);
    rpc LockSed(GetPartReq) returns (Res);
    rpc UnlockSed(GetPartReq) returns (Res);
    rpc LockBand(PartRmReq) returns (Res);
    rpc UnlockBand(PartRmReq) returns (Res);
    rpc ConfigureBand(ConfigBandReq) returns (Res);

    // iSCSI Services
    rpc StageIscsi(StageIscsiReq) returns (StageIscsiRes);
    rpc UnStageIscsi(UnStageIscsiReq) returns (UnStageIscsiRes);
    rpc ListIscsi(ListIscsiReq) returns (ListIscsiRes);

    // NVMeoF Services
    rpc StageNvmef(StageNvmefReq) returns (StageNvmefRes);
    rpc UnStageNvmef(UnStageNvmefReq) returns (UnStageNvmefRes);
    rpc ListNvmef(ListNvmefReq) returns (ListNvmefRes);

    // Mercury Services for CSI driver
    rpc MercuryProxy(MercProxyReq) returns (MercProxyRes);
    rpc FileSystemType(FileSystemTypeReq) returns (FileSystemTypeRes);
    rpc MountInfo(MountInfoReq) returns (MountInfoRes);
    rpc MountVolume(MountVolumeReq) returns (MountVolumeRes);
    rpc UnMountVolume(UnMountVolumeReq) returns (UnMountVolumeRes);
    rpc LvQoS(LvQoSReq) returns (LvQoSRes);


    // RAID Health services
    rpc RetrieveTopLevelLogicalVol(ScanReq) returns (TopLvScanRes);
    rpc RetrieveLogicalVol(GetLvReq) returns (GetLvRes);
    rpc RetrieveVgFromUUID(MissingPvMsg) returns (MissingPvMsg);
    rpc RecoverPv(MissingPvMsg) returns (Res);
    rpc LvConvertRepair(LvConReq) returns (Res);
    rpc VgReduceMissing(VgReq) returns (Res);

    rpc LvConvertReplace(LvConReplaceReq) returns (Res);
    rpc RetrieveLvsOfPv(LvsOfPvReq) returns (LvsOfPvRes);
    rpc RetrieveFreeExtentOfPv(FreeExtentOfPvReq) returns (FreeExtentOfPvRes);
    rpc CheckLvSync(LvSyncReq) returns (LvSyncRes);

    rpc CtrlPubIscsiDrives(CtrlPubIscsiDrivesReq) returns (CtrlPubIscsiDrivesRes);
    rpc UnCtrlPubIscsiDrives(UnCtrlPubIscsiDrivesReq) returns (UnCtrlPubIscsiDrivesRes);
}

message GetInfoReq {
    // Intentially empty
}

message GetInfoRes {
    // Agent Name which initiall is StoLake.  Variation may co-exist in the future
    string AgentName = 1;

    // Server version indentifier.  Client is responsible for combatibility checks.
    string Version = 2;
}

message TopLvScanRes {
    repeated TopLvInfo TopLvs = 1;
}

message TopLvInfo {
    string LvName = 1;
    string VgName = 2;
    string LvFullName = 3;
    string RaidType = 4;
    string Health = 5;
}

message LvConReq {
    string AffectedPvPath = 1;
    string AffectedVgName = 2;
    string ReplacementPvPath = 3;
}

message MissingPvMsg {
    string UUID = 1;
    string Vgname = 2;
}

message GetLvReq {
    string LvName = 1;
}

message GetLvRes {
    repeated LV LvList = 1;
}

message LV {
	string Vgname = 1;
	string Lvname = 2;
	string Lvsize = 3;
	string Segtype = 4;
	string Stripes = 5;
	string Datacopies = 6;
	string Paritychunks = 7;
	string Devices = 8;
	string Metadatadevices = 9;
    string Syncpercent = 10;
	string Copypercent = 11;
	repeated LV NestedLV = 12;
	repeated string CfgPV = 13;
}

message LvConReplaceReq {
    string OldPvPath = 1;
    string LvPath = 2;
    string NewPvPath = 3;
}

message LvsOfPvReq {
    string PvName = 1;
}

message LvsOfPvRes {
    message LvInfo {
        string  PvName = 1;
        string  VgName = 2;
        string  LvName = 3;        
        string  LvPath = 4;
        int64   LvSize = 5;
        uint64  LvExtentSize = 6;
    }
    repeated LvInfo LvsOfPv = 1;
}

message FreeExtentOfPvReq {
    string PvName = 1;
}

message FreeExtentOfPvRes {
    message ExtentInfo {
        string  PvName = 1;
        uint64  ExtentStart = 2;
        uint64  ExtentSize = 3;
        uint64  ExtentEnd = 4;
    }
    repeated ExtentInfo FreeExtentOfPv = 1;
}

message LvSyncReq {
    string LvPath = 1;
}

message LvSyncRes {
    string SyncPercent = 1;
}

message GetUdevReq {
    string VendorName = 1;
}

message GetUdevRes {
    repeated Udev DevList = 1;
}

message Udev {
    string FwRev = 1;
    string Handle = 2;
    string Model = 3;
    string Serial = 4;
    string Vendor = 5;
}

message GetPartReq {
    string DevPath = 1;
}

message GetPartRes {
    repeated string PartedRes = 1;
}

message PartRmReq {
    string DevPath = 1;
    uint64 PartNum = 2;
}

message PartReq {
    string DevPath = 1;
    string PartName = 2;
    uint64 PStart = 3;
    uint64 PEnd = 4;
}

message PartRes {
    PartReq Req = 1;
    bool    Flag = 2;
}

message PvInfo {
    string PvName = 1;
    string VgName = 2;
    string Format = 3;
    string Attr = 4;
    int64 PSizeB = 5;
    int64 PFreeB = 6;
    string Uuid = 7;
}

message VgInfo {
    string  VgName = 1;
    uint32  PvCount = 2;
    uint32  LvCount = 3;
    uint32  SnapCount = 4;
    string  VgAttr = 5;
    uint32  VgSizeGb = 6;
    uint32  VgFreeGb = 7;
}

message PvScanRes {
    repeated PvInfo Pvs = 1;
}

message VgScanRes {
    repeated VgInfo Vgs = 1;
}

message PvRmReq {
    repeated string PvNames = 1;
}

message VgRmReq {
    string VgName = 1;
}

message RmRes {
    bool IsSuccess = 1;
}

message VgChkReq {
    string VgName = 1;
}

message VgChkRes {
    VgInfo  Vg = 1;
    bool    IsExist = 2;
}

message VgReq {
    string PartName = 1;
    string VgName = 2;
}

message VgRes {
    VgInfo  Vg = 1;
    bool    Flag = 2;
}

// no parameter requirement for scan request
// empty message to server as provisioning in the future
message ScanReq {}

// scan request response
message ScanRes {
    bool IsSuccess = 1;
}

message ChgReq {
    repeated string Arg = 1;
}

message ChgRes {
    bool IsSuccess = 1;
}

message MercProxyReq {
    // The operation to be run on the local node's base operating system.
    // The agent will filter out commands that are not expected for security
    string Cmd = 1;
    repeated string Args = 2;
}

message MercProxyRes {
    string Stdout = 1;
    string Stderr = 2;
}


message FileSystemTypeReq {
    // Returns the discoverable file system type of the block device
    string DevPath = 1;
}

message FileSystemTypeRes {
    // Returns "" if no file system is detected or the type of file system
    string FsType = 1;
}

message MountInfoReq {}

message MountInfoRes {
    // Returns contents of /proc/self/mountinfo
    string Info = 1;
}

message MountVolumeReq {
    // Source path must start with /dev/
    string SourcePath = 1;
    // Target path must start with /var/lib/kubelet/pods
    string TargetPath = 2;
    // Valid File system types are xfs, ext2, ext3, fat and block for no file system
    string FsType = 3;
    // Mount Read Only. Default is false.
    bool ReadOnly = 4;
    // Comma seperated string of mount options
    string MountOptions = 5;
    // GroupID to be set for the mount target
    string GroupId = 6;
    // Set user permission ugo+rwx on target 
    bool AllUsers = 7;
}


message MountVolumeRes {
    string Stdout = 1;
}

message UnMountVolumeReq {
    string TargetPath = 1;
}

message UnMountVolumeRes {
    string Stdout = 1;
}

message LvQoSReq {
    // Target Path of LV block device. (/dev/vgname/lvname)
    string TargetPath = 1;
    // IOPS per GB throttling limit
    string IOPSperGB = 2;
    // MB/s per GB throttling limit
    string MBpSperGB = 3;
}

message LvQoSRes {}

message GetSedRes {
    repeated Udev AllList = 1;
    repeated Udev NonSedList = 2;
    repeated Udev SedList = 3;
}

message Res {
    bool IsTrue = 1;
}

message ConfigBandReq {
    string DevPath = 1;
    uint64 PartNum = 2;
    uint64 PStart = 3;
    uint64 PEnd = 4;
}

// ISCSI //
message StageIscsiReq {
    // The Universal Unique Identifier (UUID) of the Logical Volume(LV)
    // to be used as backing storage of the iSCSI target. It should only
    // contain alphanumeric characters with length 6-4-4-4-4-4-6,
    // separated by hyphen. The LV with the UUID should exist and be 
    // accessible on the system. This field is REQUIRED. 
    // (i.e. 07HpVE-DIAN-wO00-eG7J-j3qf-xz2S-zyAdJT)
    string LvUuid = 1;
    
    // The iSCSI Qualified Name(IQN) of the iSCSI initiator to be added
    // to the access control list of the iSCSI target, for access control
    // to the target. Run the command 'cat /etc/iscsi/initiatorname.iscsi'
    // on the initiator system to get the IQN. This field is REQUIRED.
    string InitiatorIqn = 2;
}

message StageIscsiRes {
    // The iSCSI Qualified Name (IQN) of the iSCSI Target used to uniquely
    // identify the target. It has a fixed prefix and follows the syntax
    // 'iqn.1992-09.com.seagate:lv:uniquename', where the unique name in
    // this case is the UUID of the logical volume used as the backing 
    // storage.
    string TargetIqn = 1;
    
    // The mapped LUN of the iSCSI target. Since there is only one
    // backstore that can be used, which is the backstore with the LV UUID
    // as its name, there will only be one mapped LUN to the target. The
    // default value is 'lun0'.
    string Lun = 2;

    // The iSCSI target portal (Network address:port number) created by
    // targetcli when the iSCSI target is created (i.e. 10.1.0.123:3260).
    // The default port used for iSCSI is 3260. The default portal value
    // is '0.0.0.0:3260'. Currently, there is no attempt to change it
    // within the code.
    string TargetPortal = 3;
}

message UnStageIscsiReq {
    // The UUID of the Logical Volume being used as backing storage of the
    // iSCSI target. It should only contain alphanumeric characters with
    // length 6-4-4-4-4-4-6, separated by hyphen. When the last initiator
    // IQN has been removed from the access control list of the target
    // with the UUID, the target will be deleted. This field is REQUIRED.
    // (i.e. 07HpVE-DIAN-wO00-eG7J-j3qf-xz2S-zyAdJT)
    string LvUuid = 1;

    // The iSCSI Qualified Name(IQN) of the iSCSI initiator to be removed
    // from the access control list of the iSCSI target. When the last
    // initiator IQN has been removed from the access control list of the
    // iSCSI target, the iSCSI target will be deleted. The backstore with
    // the LV UUID as its name will also be removed from the iSCSI
    // configuration. This field is REQUIRED.
    string InitiatorIqn = 2;
}

message UnStageIscsiRes {
    //Intentionally empty.
}

message ListIscsiReq {
    //Intentionally empty.
}

message ListIscsiRes {
    message Target {
        // The iSCSI Qualified Name (IQN) of the iSCSI Target used to uniquely
        // identify the target.
        string TargetIqn = 1;

        // The UUID of the Logical Volume being used as backing storage of
        // the iSCSI target.
        string LvUuid = 2;

        // Returns the default portal value that is created for every 
        // iSCSI target. (i.e 0.0.0.0:3260)
        string Portal = 3;

        // Returns the mapped LUN of the iSCSI target. Since there is only
        // 1 backstore that can be used, which is the backstore with the
        // LV UUID as its name, there will only be 1 mapped LUN to the
        // target. The default value 'lun0' will be returned.
        string Lun = 4;

        // The iSCSI Qualified Name(IQN) of the iSCSI initiator in the
        // access control list of the iSCSI target. If there are multiple
        // initiator IQNs, they will be included in separate structs,
        // whereby the LV UUID and Initiator IQN pair will be unique for
        // each struct.
        string InitiatorIqn = 5;
    }

    // Returns a list of Target structs, containing the 4 values of the
    // parameters in Target.
    repeated Target Targets = 1;
}

message CtrlPubIscsiDrivesReq {
    string VgName = 1;
    string InitiatorIqn = 2;
}

message CtrlPubIscsiDrivesRes {
    message Target {
        string TargetIqn = 1;
        string Lun = 2;
        string TargetPortal = 3;
    }
    repeated Target Targets = 1;
}

message UnCtrlPubIscsiDrivesReq {
    string VgName = 1;
    string InitiatorIqn = 2;
}

message UnCtrlPubIscsiDrivesRes {
    //Intentionally empty.
}

// NVMEoF //
message StageNvmefReq {
    // The UUID of the Logical Volume(LV) to be used as backing storage
    // of the NVMeoF target Subsystem. It should only contain alphanumeric
    // characters with length 6-4-4-4-4-4-6, separated by hyphen. The
    // LV with the UUID should exist and be accessible on the system.
    // The LV path will be used as the device path of the NVMe subsystem.
    // This field is REQUIRED. 
    // (i.e. 07HpVE-DIAN-wO00-eG7J-j3qf-xz2S-zyAdJT)
    string LvUuid = 1;

    // The NVMe Qualified Name (NQN) of the host that is to be added to
    // the allowed hosts of the NVMe Subsystem. The NQN will first be read
    // from '/etc/nvme/hostnqn' on the host system. If that does not exist
    // , the autogenerated NQN value from the NVMe Host kernel module on 
    // the host system is used next. Use the command 'nvme gen-hostnqn'
    // from the nvme-cli package to generate a hostnqn file in the 
    // '/etc/nvme' directory. This field is REQUIRED.
    string HostNqn = 2;
    
    // The address family parameter of the NVMe port. This parameter only
    // allow the value 'ipv4' and 'ipv6'. It is case sensitive and 'ipv4'
    // is more commonly used. Using 'ipv6' might result in an error if it
    // is not supported. This field is OPTIONAL. The value will default to
    // 'ipv4' if left empty.
    string AdrFam = 3;

    // The transport type parameter of the NVMe port. This parameter 
    // currently only allow the value 'rdma' or 'tcp'. Modprobe of the
    // necessary modules is required to use the stated transport type,
    // 'nvmet-rdma' or 'nvmet-tcp' for the 'rdma' or 'tcp' transport type
    // respectively. This field is OPTIONAL. The value will default to
    // 'rdma' if left empty.
    string TrType = 4;

    // This parameter is to specify the network address of the NVMe port.
    // If using IP-based address, the address family should be 'ipv4' and
    // the transport type should also use IP-addressing. The default port
    // number used will be 4420. This field is REQUIRED.
    string TrAddr = 5;
}

message StageNvmefRes {
    // The NVMe Qualified Name (NQN) of the NVMeoF target Subsystem
    // used to uniquely identify the subsystem. It has a fixed prefix and  
    // follows the syntax 'nqn.1992-09.com.seagate:nvme:uniquename', where
    // the unique name in this case is the UUID of the logical volume used
    // as the backing storage.
    string SubsystemNqn = 1;

    // The namespace of the subsystem where the backing storage is
    // configured. The backing storage is the logical volume with the UUID
    // specified in the NQN of the subsystem. The device path of the 
    // namespace is set to the path of the logical volume. The namespace
    // is typically specified in the NVMe device name after the 'n'.
    // (e.g. nvme0n1, namespace is 1 in this case)
    string Namespace = 2;
    
    // The target portal value is the combination of the network address
    // and default NVMe port number of the NVMe port.
    string TargetPortal = 3;
}

message UnStageNvmefReq {
    // The UUID of the Logical Volume being used as backing storage of the
    // NVMeoF target subsystem. It should only contain alphanumeric 
    // characters with length 6-4-4-4-4-4-6, separated by hyphen.
    // (i.e. 07HpVE-DIAN-wO00-eG7J-j3qf-xz2S-zyAdJT) 
    // When the last host NQN has been removed from the access control 
    // list of the subsystem with the UUID, the namespace of the subsystem
    // will be removed and the subsystem will be deleted. The subsystem's
    // link to any port will be removed. If the port has the last 
    // symlinked target removed, the port will also be deleted.
    // This field is REQUIRED. 
    string LvUuid = 1;

    // The NVMe Qualified Name (NQN) of the host that is to be removed
    // from the allowed hosts list of the NVMe target subsystem. When the
    // last host NQN has been removed from the allowed hosts list of the
    // NVMe subsystem, the namespace of the target will be removed and the
    // NVMe subsystem will be deleted. The symlink of the subsystem will
    // also be removed from any ports where it exists. This field is
    // REQUIRED.
    string HostNqn = 2;
}

message UnStageNvmefRes {
    //Intentionally empty.
}

message ListNvmefReq {
    //Intentionally empty.
}

message ListNvmefRes {
    message Target {
        // The NVMe Qualified Name (NQN) of the NVMeoF target Subsystem 
        // used to uniquely identify the subsystem. It has a fixed prefix and  
        // follows the syntax 'nqn.1992-09.com.seagate:nvme:uniquename', where
        // the unique name in this case is the UUID of the logical volume used
        // as the backing storage.
        string SubsystemNqn = 1;

        // The UUID of the Logical Volume being used as backing storage of
        // the NVMe subsystem. Add the fixed prefix before the UUID to get
        // the NQN of the subsystem. The NQN can be used in the '-n' 
        // option of the 'nvme connect' command on the host system to 
        // connect to the NVMe subsystem.
        string LvUuid = 2;

        // The namespace of the subsystem where the backing storage is the
        // logical volume with the LvUuid parameter as its UUID. The LV
        // path is set in the device path of the namespace. The namespace
        // is typically specified in the NVMe device name after the 'n'.
        // (e.g. nvme0n1, namespace is 1 in this case)
        string NameSpace = 3;

        // The configured transport type of the NVMe port. Values are
        // 'rdma', 'tcp' or other supported transport types. Value can be
        // used in the '-t' option for the command 'nvme discover' on the
        // host system.
        string TrType = 4;

        // The combination of the network address and default NVMe port
        // number of the NVMe port. (i.e 10.1.0.123:4420) The network
        // address portion can be used in the '-a' option for the command
        // 'nvme discover' on the host system.
        string Portal = 5;

        // The NVMe Qualified Name (NQN) of the hosts allowed to connect
        // to the NVMe target. If there are multiple NQNs, each host NQN
        // will be returned in a separate struct, whereby the LV UUID and
        // host NQN pair will be unique for each struct. Use the 'nvme
        // discover' and 'nvme connect' command on the host system in the
        // allowed hosts list to connect to the NVMe subsytem.
        string HostNqn = 6;
    }

    // Returns a list of Target structs, containing the 4 values of the
    // parameters in Target.
    repeated Target Targets = 1;
}

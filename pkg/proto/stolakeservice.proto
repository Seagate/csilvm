syntax = "proto3";
package proto;

option go_package = "stolake/proto";

// Service to manage paritioning of devices
service stolake {
    // Agent Identity information
    rpc RetrieveInfo(GetInfoReq) returns (GetInfoRes);

    // Retrieve udev information
    rpc RetrieveUDev(GetUdevReq) returns (GetUdevRes);

    // Retrieve partition information
    rpc RetrievePart(GetPartReq) returns (GetPartRes);

    // Partition Request
    rpc RemovePart(PartRmReq) returns (RmRes);
    rpc PartDev(PartReq) returns (PartRes);
    rpc ConfigDriveGPT(GetPartReq) returns (PartRes);

    // LVM Services
    rpc RetrievePhyVol(ScanReq) returns (PvScanRes);
    rpc RetrieveVolGroup(ScanReq) returns (VgScanRes);
    rpc RemovePhyVol(PvRmReq) returns (RmRes);
    rpc RemoveVolGroup(VgRmReq) returns (RmRes);
    rpc CheckVolGroup(VgChkReq) returns (VgChkRes);
    rpc CreateVolGroup(VgReq) returns (VgRes);
    rpc ExtendVolGroup(VgReq) returns (VgRes);
    rpc PvScan(ScanReq) returns (ScanRes);
    rpc VgScan(ScanReq) returns (ScanRes);
    rpc VgChange(ChgReq) returns (ChgRes);
    rpc LvChange(ChgReq) returns (ChgRes);

    // SED services
    rpc RetrieveSed(GetUdevReq) returns (GetSedRes);
    rpc CheckSed(GetPartReq) returns (Res);
    rpc Takeownership(GetPartReq) returns (Res);
    rpc LockSed(GetPartReq) returns (Res);
    rpc UnlockSed(GetPartReq) returns (Res);
    rpc LockBand(PartRmReq) returns (Res);
    rpc UnlockBand(PartRmReq) returns (Res);
    rpc ConfigureBand(ConfigBandReq) returns (Res);

    // Mercury Services for CSI driver
    rpc MercuryProxy(MercProxyReq) returns (MercProxyRes);
}

message GetInfoReq {
    // Intentially empty
}

message GetInfoRes {
    // Agent Name which initiall is StoLake.  Variation may co-exist in the future
    string AgentName = 1;

    // Server version indentifier.  Client is responsible for combatibility checks.
    string Version = 2;
}

message GetUdevReq {
    string VendorName = 1;
}

message GetUdevRes {
    repeated Udev DevList = 1;
}

message Udev {
    string FwRev = 1;
    string Handle = 2;
    string Model = 3;
    string Serial = 4;
    string Vendor = 5;
}

message GetPartReq {
    string DevPath = 1;
}

message GetPartRes {
    repeated string PartedRes = 1;
}

message PartRmReq {
    string DevPath = 1;
    uint64 PartNum = 2;
}

message PartReq {
    string DevPath = 1;
    string PartName = 2;
    uint64 PStart = 3;
    uint64 PEnd = 4;
}

message PartRes {
    PartReq Req = 1;
    bool    Flag = 2;
}

message PvInfo {
    string PvName = 1;
    string VgName = 2;
    string Format = 3;
    string Attr = 4;
    int64 PSizeB = 5;
    int64 PFreeB = 6;
}

message VgInfo {
    string  VgName = 1;
    uint32  PvCount = 2;
    uint32  LvCount = 3;
    uint32  SnapCount = 4;
    string  VgAttr = 5;
    uint32  VgSizeGb = 6;
    uint32  VgFreeGb = 7;
}

message PvScanRes {
    repeated PvInfo Pvs = 1;
}

message VgScanRes {
    repeated VgInfo Vgs = 1;
}

message PvRmReq {
    repeated string PvNames = 1;
}

message VgRmReq {
    string VgName = 1;
}

message RmRes {
    bool IsSuccess = 1;
}

message VgChkReq {
    string VgName = 1;
}

message VgChkRes {
    VgInfo  Vg = 1;
    bool    IsExist = 2;
}

message VgReq {
    string PartName = 1;
    string VgName = 2;
}

message VgRes {
    VgInfo  Vg = 1;
    bool    Flag = 2;
}

// no parameter requirement for scan request
// empty message to server as provisioning in the future
message ScanReq {}

// scan request response
message ScanRes {
    bool IsSuccess = 1;
}

message ChgReq {
    repeated string Arg = 1;
}

message ChgRes {
    bool IsSuccess = 1;
}

message MercProxyReq {
    // The operation to be run on the local node's base operating system.
    // The agent will filter out commands that are not expected for security 
    string Cmd = 1;
    repeated string Args = 2;
}

message MercProxyRes {
    string Stdout = 1;
    string Stderr = 2;
}

message GetSedRes {
    repeated Udev AllList = 1;
    repeated Udev NonSedList = 2;
    repeated Udev SedList = 3;
}

message Res {
    bool IsTrue = 1;
}

message ConfigBandReq {
    string DevPath = 1;
    uint64 PartNum = 2;
    uint64 PStart = 3;
    uint64 PEnd = 4;
}
